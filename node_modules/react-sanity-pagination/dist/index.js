'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var ReactDOM = _interopDefault(require('react-dom'));

var App = function App() {
  var action = function action() {
    console.log("working");
  };
  return React__default.createElement(
    "div",
    null,
    "This is the app ",
    React__default.createElement("span", null),
    React__default.createElement(Pagination, { action: action, postsLength: 15 })
  );
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

function Pagination(props) {
  var _useState = React.useState(1),
      _useState2 = slicedToArray(_useState, 2),
      currentPage = _useState2[0],
      setCurrentPage = _useState2[1];

  var _useState3 = React.useState("0...5"),
      _useState4 = slicedToArray(_useState3, 2),
      range = _useState4[0],
      setRange = _useState4[1];

  var buttons = [];
  var postsLength = props.postsLength;
  var postsPerPage = 5;
  var pages = Math.ceil(postsLength / postsPerPage);

  // Paginate Function to determine query range
  var PaginateButton = function PaginateButton(props) {
    var page = props.page + 1;

    var changePage = function changePage(page, range) {
      setCurrentPage(page);
      // const formula = (page - 1) * postsPerPage;
      var firstNumber = postsPerPage * (page - 1);
      var secondNumber = firstNumber + postsPerPage;
      var newRange = firstNumber + "..." + secondNumber;
      setRange(newRange);
      if (page !== currentPage) {
        props.action(page, newRange);
      } else {
        console.log("Returning nothing because already on page üïµÔ∏è‚Äç!");
      }
    };
    return React__default.createElement(
      "li",
      {
        className: page === currentPage ? "active" : "",
        onClick: function onClick() {
          return changePage(page, range);
        }
      },
      page
    );
  };

  // Assign Buttons
  for (var i = 0; i < pages; i++) {
    buttons.push(React__default.createElement(PaginateButton, { page: i, key: i, action: props.action }));
  }
  // Return Pagination
  return React__default.createElement(
    React__default.Fragment,
    null,
    postsLength > 1 ? React__default.createElement(
      "ul",
      { className: "pagePagination" },
      buttons
    ) : ""
  );
}

ReactDOM.render(React__default.createElement(App, null), document.getElementById("root"));

module.exports = Pagination;
//# sourceMappingURL=index.js.map
