import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';

function updateURL(page) {
  if (window.history.pushState) {
    var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + ("?page=" + page);
    window.history.pushState({ path: newurl }, "", newurl);
  }
}

var PaginatePrev = function PaginatePrev(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.prevButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationPrev",
          disabled: props.currentPage === 1 ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.currentPage - 1);
          }
        },
        props.prevButtonLabel ? props.prevButtonLabel : "<"
      )
    ) : ""
  );
};

var PaginateNext = function PaginateNext(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.nextButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationNext",
          disabled: props.currentPage === props.pages ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.currentPage + 1);
          }
        },
        props.nextButtonLabel ? props.nextButtonLabel : ">"
      )
    ) : ""
  );
};

var PaginateFiveForward = function PaginateFiveForward(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.jumpFiveForwardButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationFiveForwrard",
          disabled: props.currentPage > props.pages - 5 ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.currentPage === 1 ? props.currentPage + 4 : props.currentPage + 5);
          }
        },
        props.jumpFiveForwardButtonLabel ? props.jumpFiveForwardButtonLabel : ">>"
      )
    ) : ""
  );
};

var PaginateTenForward = function PaginateTenForward(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.jumpTenForwardButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationTenForward",
          disabled: props.currentPage > props.pages - 10 ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.currentPage === 1 ? props.currentPage + 9 : props.currentPage + 10);
          }
        },
        props.jumpTenForwardButtonLabel ? props.jumpTenForwardButtonLabel : ">>>"
      )
    ) : ""
  );
};

var PaginateFiveBackward = function PaginateFiveBackward(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.jumpFiveBackwardButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationFiveBackward",
          disabled: props.currentPage < 5 ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.currentPage === 5 ? props.currentPage - 4 : props.currentPage - 5);
          }
        },
        props.jumpFiveBackwardButtonLabel ? props.jumpFiveBackwardButtonLabel : "<<"
      )
    ) : ""
  );
};

var PaginateTenBackward = function PaginateTenBackward(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.jumpTenBackwardButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationTenBackward",
          disabled: props.currentPage < 10 ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.currentPage === 10 ? props.currentPage - 9 : props.currentPage - 10);
          }
        },
        props.jumpTenBackwardButtonLabel ? props.jumpTenBackwardButtonLabel : "<<<"
      )
    ) : ""
  );
};

var PaginateEnd = function PaginateEnd(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.jumpEndButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationEnd",
          disabled: props.currentPage === props.pages ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(props.pages);
          }
        },
        props.jumpEndButtonLabel ? props.jumpEndButtonLabel : "End"
      )
    ) : ""
  );
};

var PaginateStart = function PaginateStart(props) {
  return React.createElement(
    React.Fragment,
    null,
    props.jumpStartButton === true ? React.createElement(
      "li",
      null,
      React.createElement(
        "button",
        {
          className: "paginateButton paginationStart",
          disabled: props.currentPage === 1 ? "disabled" : "",
          onClick: function onClick() {
            return props.changePage(1);
          }
        },
        props.jumpStartButtonLabel ? props.jumpStartButtonLabel : "Start"
      )
    ) : ""
  );
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

function Pagination(props) {
  // Called carbon copy because I never want this to change
  var carbonCopy = props.items;
  // Used to reRender component

  var _useState = useState(""),
      _useState2 = slicedToArray(_useState, 2),
      render = _useState2[0],
      setRender = _useState2[1];

  var _useState3 = useState(1),
      _useState4 = slicedToArray(_useState3, 2),
      currentPage = _useState4[0],
      setCurrentPage = _useState4[1];

  var postsPerPage = props.postsPerPage;

  var _useState5 = useState("0..." + postsPerPage),
      _useState6 = slicedToArray(_useState5, 2),
      range = _useState6[0],
      setRange = _useState6[1];

  var buttons = [];
  var postsLength = props.items.length;
  var pages = Math.ceil(postsLength / postsPerPage);

  // Set page if parameter is there
  useEffect(function () {
    if (carbonCopy.length === 0) {
      setRender("render_" + Math.random());
    }
    if (carbonCopy.length > 0) {
      var url = window.location.href;
      if (url.indexOf("?page=") !== -1) {
        var param = url.substring(url.indexOf("?page="));
        var page = Number(param.replace("?page=", ""));
        // Update Content
        changePage(page);
      } else {
        changePage(1);
      }
    }
  }, [render]);

  // Paginate Function to determine query range
  var PaginateButton = function PaginateButton(props) {
    var page = props.page;
    if (props.paginationStyle === "activePage") {
      return React.createElement(
        React.Fragment,
        null,
        React.createElement(
          React.Fragment,
          null,
          page === currentPage ? React.createElement(
            "li",
            null,
            React.createElement(
              "button",
              {
                className: page === currentPage ? "active" : "",
                onClick: function onClick() {
                  return changePage(page, range);
                }
              },
              page
            )
          ) : ""
        )
      );
    } else if (props.paginationStyle === "centerMode") {
      return React.createElement(
        React.Fragment,
        null,
        page === currentPage || page === currentPage - 1 || page === currentPage + 1 ? React.createElement(
          "li",
          null,
          React.createElement(
            "button",
            {
              className: page === currentPage ? "active" : "",
              onClick: function onClick() {
                return changePage(page, range);
              }
            },
            page
          )
        ) : ""
      );
    } else {
      return React.createElement(
        React.Fragment,
        null,
        React.createElement(
          "li",
          null,
          React.createElement(
            "button",
            {
              className: page === currentPage ? "active" : "",
              onClick: function onClick() {
                return changePage(page, range);
              }
            },
            page
          )
        )
      );
    }
  };

  var changePage = function changePage(page, range) {
    // Calculating Range
    var firstNumber = postsPerPage * (page - 1);
    var secondNumber = firstNumber + postsPerPage;
    var newRange = firstNumber + "..." + secondNumber;
    // Returning part of object that we need
    var itemsToReturn = [];
    carbonCopy.forEach(function (item, index) {
      if (index >= firstNumber && index <= secondNumber - 1) {
        itemsToReturn.push(item);
      }
    });
    setCurrentPage(page);
    setRange(newRange);
    if (page !== currentPage) {
      updateURL(page);
      // console.log(page, newRange, itemsToReturn);
      props.action(page, newRange, itemsToReturn);
    } else {
      // console.log(page, newRange, itemsToReturn);
      props.action(1, newRange, itemsToReturn);
      // Returning nothing because already on page 🕵️‍!
    }
  };

  // Assign Buttons
  for (var i = 0; i < pages; i++) {
    buttons.push(React.createElement(
      React.Fragment,
      { key: i + 1 },
      React.createElement(PaginateButton, {
        page: i + 1,
        action: props.action,
        paginationStyle: props.paginationStyle
      })
    ));
  }
  // Return Pagination
  return React.createElement(
    React.Fragment,
    null,
    postsLength > 1 ? React.createElement(
      "ul",
      { className: ['pagePagination', props.className].join(' ') },
      React.createElement(PaginateStart, {
        jumpStartButton: props.jumpStartButton,
        jumpStartButtonLabel: props.jumpStartButtonLabel,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages
      }),
      React.createElement(PaginateTenBackward, {
        jumpTenBackwardButton: props.jumpTenBackwardButton,
        jumpTenBackwardButtonLabel: props.jumpTenBackwardButtonLabel,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages
      }),
      React.createElement(PaginateFiveBackward, {
        jumpFiveBackwardButton: props.jumpFiveBackwardButton,
        jumpFiveBackwardButtonLabel: props.jumpFiveBackwardButtonLabel,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages
      }),
      React.createElement(PaginatePrev, {
        prevButton: props.prevButton,
        currentPage: currentPage,
        changePage: changePage,
        prevButtonLabel: props.prevButtonLabel
      }),
      buttons,
      React.createElement(PaginateNext, {
        nextButton: props.nextButton,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages,
        nextButtonLabel: props.nextButtonLabel
      }),
      React.createElement(PaginateFiveForward, {
        jumpFiveForwardButton: props.jumpFiveForwardButton,
        jumpFiveForwardButtonLabel: props.jumpFiveForwardButtonLabel,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages
      }),
      React.createElement(PaginateTenForward, {
        jumpTenForwardButton: props.jumpTenForwardButton,
        jumpTenForwardButtonLabel: props.jumpTenForwardButtonLabel,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages
      }),
      React.createElement(PaginateEnd, {
        jumpEndButton: props.jumpEndButton,
        jumpEndButtonLabel: props.jumpEndButtonLabel,
        currentPage: currentPage,
        changePage: changePage,
        pages: pages
      })
    ) : ""
  );
}

Pagination.propTypes = {
  paginationStyle: PropTypes.string,
  action: PropTypes.func,
  postsPerPage: PropTypes.number,
  postsLength: PropTypes.number,
  nextButton: PropTypes.bool,
  nextButtonLabel: PropTypes.string,
  prevButton: PropTypes.bool,
  prevButtonLabel: PropTypes.string,
  jumpStartButton: PropTypes.bool,
  jumpStartButtonLabel: PropTypes.string,
  jumpFiveForwardButton: PropTypes.bool,
  jumpFiveForwardButtonLabel: PropTypes.string,
  jumpTenForwardButton: PropTypes.bool,
  jumpTenForwardButtonLabel: PropTypes.string,
  jumpFiveBackwardButton: PropTypes.bool,
  jumpFiveBackwardButtonLabel: PropTypes.string,
  jumpTenBackwardButton: PropTypes.bool,
  jumpTenBackwardButtonLabel: PropTypes.string,
  jumpEndButton: PropTypes.bool,
  jumpEndButtonLabel: PropTypes.string,
  className: PropTypes.string
};

export default Pagination;
//# sourceMappingURL=pagination.es.js.map
